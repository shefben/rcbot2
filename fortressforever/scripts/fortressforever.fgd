//-------------------------------------------------------------------------
//
// Game data file for Fortress Forever.
//
//-------------------------------------------------------------------------

@include "ff_base.fgd"

@SolidClass = func_ladder : 
	"Ladder. Players will be able to move freely along this brush, as if it was a ladder." +
	"Apply the toolsinvisibleladder material to a func_ladder brush."
[
]

//-------------------------------------------------------------------------
//
// Camera/monitor entities
//
//-------------------------------------------------------------------------
@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = point_camera : "Camera"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0 
	]

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	FOV(float) : "FOV" : 90 : "Field of view in degrees"
//	resolution(float) : "resolution" : 256 : "width/height of the render target for the camera"
	UseScreenAspectRatio(choices) : "Screen Aspect Ratio" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogEnable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogColor(color255) : "Fog Color" : "0 0 0"
	fogStart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogEnd(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	renderTarget(string) : "Render Target" : "_rt_Camera" : "The render target of the camera."

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff(void) : "Turn the camera on, and turn all other cameras off."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
]

@SolidClass base(func_brush) = func_monitor :
	"A monitor that renders the view from a given point_camera entity."
[
	target(target_destination) : "Camera name"
	
	// Inputs
	input Toggle(void) : "Toggle - If on, turn off, if off, turn on."
	input Enable(void) : "Enable."
	input Disable(void) : "Disable."
	input SetCamera(string) : "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
]

// Do this w/ LUA exclusively
//@SolidClass base(Trigger) = trigger_ff_location :
//	"Brush-based location displaying."
//[
//	areaname(string) : "Area Name" : : "The name of the area this brush is describing e.g. flag room."
//	team(choices) : "Team" : "The team this area belongs to." =
//	[
//		1 : "No Team"
//		2 : "Blue Team"
//		3 : "Red Team"
//		4 : "Yellow Team"
//		5 : "Green Team"
//	]
//]

@SolidClass base(Trigger) = trigger_ff_script : 
	"Brush-based Fortress Forever goal. Interfaced from the lua scripting environment."
[
	output OnOutput(void) : "Output to be fired when activated from the lua scripting environment."
]

@SolidClass base(Targetname, RenderFields, Global) = trigger_ff_clip :
	"Lua clip brush."
[
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/ff_script_helper.mdl") = info_ff_script :
	"Point-based Fortress Forever goal. Interfaced from the lua scripting environment."
[
	output OnOutput(void) : "Output to be fired when activated from the lua scripting environment."
]

@PointClass base(Targetname, Angles) studio("models/editor/playerstart.mdl") = info_ff_teamspawn :
	"Team Spawn. This entity is placed where players will be spawned. The scripting environment in Fortress Forever " +
	"controls which players will be able to spawn here. See the documentation for more details."
[
]

@PointClass base(Targetname, Angles) studio("models/buildable/respawn_turret/respawn_turret.mdl") = ff_miniturret :
	"Respawn turret!"
[
]

@PointClass base(Targetname, Angles) studio("models/props/ff_dustbowl/minecart.mdl") = ff_minecart :
	"VPhysics Mine Cart"
[
	start_disabled(choices) : "Start Disabled" : "Start the object disabled (unable to move)." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname, Parentname, Angles) cylinder(255 255 255, targetname, target, radius, targetname, targetname, radius) color(255 192 0) size(16 16 16) = path_mapguide : 
	"An entity used to build paths for map guides to follow. Each path_mapguide is a node on the path, each holding the name of the next path_mapguide in the path."
[
	target(target_destination) : "Next MapGuide Target" : : "The next path_mapguide in the path."
	wait(float) : "Wait" : 10 : "Seconds spent waiting at this point."
	time(float) : "Time" : 10 : "Seconds spent travelling from this point to the next."
	curvetowards(target_destination) : "Curve towards target" : : "Curve towards this point."
	narration(string) : "Narration" : : "Narration file to play."
]