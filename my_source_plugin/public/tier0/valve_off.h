//========= Copyright Â© 1996-2005, Valve Corporation, All rights reserved. ============//
//
// Purpose:
//
// $NoKeywords: $
//
//=============================================================================//

// This file is used to turn off specific compiler warnings that we don't want to see.
// It is included at the beginning of a block of code, and then valve_on.h is included
// at the end of the block.

#ifdef _MSC_VER

// Turn off warnings that are generated by code that we can't control, such as system headers.
#pragma warning( push )
#pragma warning( disable : 4514 ) // unreferenced inline function has been removed
#pragma warning( disable : 4100 ) // unreferenced formal parameter
#pragma warning( disable : 4127 ) // conditional expression is constant
#pragma warning( disable : 4201 ) // nonstandard extension used : nameless struct/union
#pragma warning( disable : 4512 ) // assignment operator could not be generated
#pragma warning( disable : 4668 ) // 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives'
#pragma warning( disable : 4710 ) // 'function' : function not inlined
#pragma warning( disable : 4711 ) // function 'function' selected for inline expansion
#pragma warning( disable : 4820 ) // 'bytes' bytes padding added after construct 'member_name'

// These are super common warnings that are almost never actual bugs.
#pragma warning( disable : 4097 ) // typedef-name 'identifier1' used as synonym for class-name 'identifier2'
#pragma warning( disable : 4350 ) // behavior change: 'member1' called instead of 'member2'
#pragma warning( disable : 4355 ) // 'this' : used in base member initializer list
#pragma warning( disable : 4365 ) // 'action' : conversion from 'type_1' to 'type_2', signed/unsigned mismatch
#pragma warning( disable : 4388 ) // signed/unsigned mismatch
#pragma warning( disable : 4061 ) // enumerator 'identifier' in switch of enum 'enumeration' is not explicitly handled by a case label
#pragma warning( disable : 4062 ) // enumerator 'identifier' in switch of enum 'enumeration' is not handled
#pragma warning( disable : 4242 ) // 'identifier' : conversion from 'type1' to 'type2', possible loss of data
#pragma warning( disable : 4244 ) // 'argument' : conversion from 'type1' to 'type2', possible loss of data
#pragma warning( disable : 4254 ) // 'operator' : conversion from 'type1' to 'type2', possible loss of data
#pragma warning( disable : 4255 ) // 'function' : no function prototype given: converting '()' to '(void)'
#pragma warning( disable : 4263 ) // 'function' : member function does not override any virtual member function
#pragma warning( disable : 4264 ) // 'virtual_function' : no override available for virtual member function from base 'class'; function is hidden
#pragma warning( disable : 4265 ) // 'class' : class has virtual functions, but destructor is not virtual
#pragma warning( disable : 4266 ) // 'function' : no override available for virtual member function from base 'type'; function is hidden
#pragma warning( disable : 4287 ) // 'operator' : unsigned/negative constant mismatch
#pragma warning( disable : 4296 ) // 'operator' : expression is always true
#pragma warning( disable : 4302 ) // 'conversion' : truncation from 'type 1' to 'type 2'
#pragma warning( disable : 4311 ) // 'variable' : pointer truncation from 'type' to 'type'
#pragma warning( disable : 4312 ) // 'operation' : conversion from 'type1' to 'type2' of greater size
#pragma warning( disable : 4324 ) // 'structure' : structure was padded due to __declspec(align())
#pragma warning( disable : 4389 ) // 'operator' : signed/unsigned mismatch
#pragma warning( disable : 4505 ) // 'function' : unreferenced local function has been removed
#pragma warning( disable : 4510 ) // 'class' : default constructor could not be generated
#pragma warning( disable : 4511 ) // 'class' : copy constructor could not be generated
#pragma warning( disable : 4530 ) // C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
#pragma warning( disable : 4548 ) // expression before comma has no effect; expected expression with side-effect
#pragma warning( disable : 4571 ) // Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught
#pragma warning( disable : 4610 ) // object 'class' can never be instantiated - user-defined constructor required
#pragma warning( disable : 4623 ) // 'derived class' : default constructor could not be generated because base class 'base class' default constructor is inaccessible
#pragma warning( disable : 4625 ) // 'derived class' : copy constructor could not be generated because base class 'base class' copy constructor is inaccessible
#pragma warning( disable : 4626 ) // 'derived class' : assignment operator could not be generated because base class 'base class' assignment operator is inaccessible
#pragma warning( disable : 4640 ) // 'instance' : construction of local static object is not thread-safe
#pragma warning( disable : 4692 ) // 'member': type of member is a managed array type
#pragma warning( disable : 4701 ) // potentially uninitialized local variable 'name' used
#pragma warning( disable : 4702 ) // unreachable code
#pragma warning( disable : 4706 ) // assignment within conditional expression
#pragma warning( disable : 4726 ) // sizeof operand may be ill-defined
#pragma warning( disable : 4738 ) // storing 32-bit float result in memory, possible loss of performance

#endif // _MSC_VER
